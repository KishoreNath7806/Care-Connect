// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id                        String                    @id @default(uuid())
  clerkUserId               String                    @unique
  email                     String                    @unique
  name                      String?
  imageUrl                  String?
  role                      UserRole                 @default(UNASSIGNED)
  creditedAt                DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt


  //Patient specific field
  credits                   Int?                     @default(2)

  //doctor specific field
  speciality               String?
  experience               Int?
  credentialUrl            String?
  description              String?                  @db.Text
  verificationStatus        VerificationStatus      @default(PENDING)


  //relations
  patientAppointments      Appointment[]           @relation("PatientAppointments") 
  doctorAppointments       Appointment[]           @relation("DoctorAppointments")
  availabilities           Availability[]
  transactions             CreditTransaction[]

}


model Availability{
  id          String      @id @default(uuid())
  doctorId    String
  doctor      User        @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  startTime   DateTime
  endTime     DateTime
  status      SlotStatus   @default(AVAILABLE)
  @@index([doctorId, startTime])
}


model Appointment{
  id            String      @id @default(uuid())
  patientId     String
  patient       User        @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId      String
  doctor        User        @relation("DoctorAppointments", fields: [doctorId], references: [id])
  startTime     DateTime
  endTime       DateTime
  status        AppointmentStatus @default(SCHEDULED)
  notes         String?     @db.Text
  patientDescription String?     @db.Text


  //video call fields
  videoSessionId String?
  videoSessionToken String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([status, startTime])
  @@index([doctorId, startTime])
}



model CreditTransaction{
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Int
  type        TransactionType
  packageId   String?
  createdAt   DateTime    @default(now())
}

enum UserRole {
  UNASSIGNED
  Patient
  DOCTOR
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum TransactionType {
  CREDIT_PURCHASE
  APPOINTMENT_DEDUCTION
  ADMIN_ADJUSTMENT
}

